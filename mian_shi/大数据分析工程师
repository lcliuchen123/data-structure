一、java
1.java的类型转换：自动类型转换（低级到高级）和强制类型转换（高级到低级）。
从低到高：byte ，short, char -- int -- long -- float -- double
2.异常处理机制
解释：java程序运行时，常常会出现错误或者异常，比如死循环。
error类，exception类
try, catch, throw,  throws, finally
try{
throw
}
catch{
find exception ,hand of
}
finally{
must br run
}
不能单独使用，finally里面的代码必须执行
3.封装，继承，多态
多态：一个接口，多种方法。运行过程中决定调用那个函数。
封装、继承的目的是代码重用，多态的目的是接口重用。
4.java的反射机制：
    在运行过程中，动态调用对象的属性和方法。
    注意事项：
        1.性能第一 jvm无法优化这些代码。
        2.安全限制
        3.内部暴露
    应用场景：
        1.工厂模式
        2.数据库连接
        3.分析类文件
        4.访问不能访问的属性和变量
5.类的初始化
先初始化父类，在初始化语句。

二、Scala 待学习

三、SQL（结构化查询语言）
1.sql通用，简单易学，虽然简单，但是可以完成一些复杂和高级的操作。
2.如何理解数据库和表？
数据库相当于文件块，是通过DBMS创建和操纵的容器。
把相关的资料放入特定的文件中，称作表。
3，创建表
create table products
(
    pro_id int primiary key AUTO_INCREMENT comment 'id',
    vend_id int not null comment '',
    produc_name VARCHAR(128) COMMENT '',
    price decimal（8,2） comment '价格'，#8表示整数部分加小数部分长度不能超过8位，小数部分2位。
    create_time datetime default current_timestamp comment '创建时间',
    update_time datetime comment '更新时间'
);
alter table table_name drop column column_name
alter table table_name add column column_name
case when then else end
重命名列名：alter table name change column name varchar(100)
重命名表名：rename table_name people to new_name

三、hive
1.什么是hive？
hive是一款开源的基于Hadoop的用于统计海量结构化数据的一个数据仓库，定义了类sql查询语言，HQL。
本质上讲hive是将HQL语句转换成MapReduce的一个工具。

2.什么是数据仓库？
数据仓库是一个面向主题的，集成的，相对稳定的，反映历史变化的数据集合。用于支持管理决策。

3.简单说下MapReduce？
一个计算框架，能够容易的编写应用程序，这些程序能够运行在大规模集群上，并以一种可靠地，具有容错能力的
的方式并行处理TB以上的海量数据集。
主要思想就是分而治之，mapper负责分，把复杂任务分解成若干个简单的简单的任务；
reducer人负责对map阶段的结果进行汇总。

4.hive的作用
  1.可以将结构化的数据文件映射成一张表，并提供类sql查询功能，方便非java开发人员进行操作。
  2.可以对数据提取转化加载（ETL)。
  3.构建数据仓库。
5.hive的使用场景
  1.即席查询：利用CLI和Hue之类的工具，可以对hive的数据做即席查询。
  2.离线数据分析：通过脚本执行HQL语句。
  3.构建数据仓库时用于组织管理数据库和表。

架构：
6.hive的构成部分
  1.用户接口层：CLI（命令行模式）,JDBC/ODBC和WUI。
  CLI最常用，启动的时候会启动一个hive副本。
  JDBC/ODBC是hive的客户端，用户通过客户端连接到hive server。
  客户端模式需要指出hive server所在节点，在该节点启动hive server。
  WUI是通过浏览器访问hive。
  2.元数据存储
  元数据包括Database，表名，存储空间，分区、表数据所在目录等。
  存储位置：RDSMS.（mysql、derby)
  三种连接模式：内嵌式元存储服务，本地元存储服务器和远程元存储服务器。
  3.Driver（Compiler/Optimizer/Executor)
  Driver完成HQL查询语句的词法分析，语法分析，编译，优化以及查询计划的生成。
  生成的查询计划存储在HDFS上，并由MapReduce调用执行。

7.

